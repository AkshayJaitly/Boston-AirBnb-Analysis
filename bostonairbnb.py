# -*- coding: utf-8 -*-
"""BostonAirBnb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LoAhal0jVB-vhBOmZOLKW91HWYlGoWV2

# Looking into Boston AirBnb dataset
The dataset is available at https://www.kaggle.com/airbnb/boston

There are 3 files in the dataset:

1.calendar.csv

2.listings.csv

3.reviews.csv

I have followed the CrispDm principles.


1.   Business Understanding

      *   Most common price listings for AirBnb?
      *   What is the relation between price and property type?
      *    Which room types in each neighbourhood have high   prices?
      *   What are the top 5 amenities?




2.   Data Understanding

3.   Data Preparation

4.   Modeling 

5. Evaluation

6. Deployment

# Understanding listings.csv better
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# Importing data and libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MultiLabelBinarizer 
# %matplotlib inline


listing_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/boston/listings.csv')
calendar_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/boston/calendar.csv')
reviews_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/boston/reviews.csv')
calendar_df.info()

listing_df.info()

listing_df.head()

"""The dataset here has 95 columns. We need to understand the columns better. I will list down the columns to understand better."""

listing_df.columns

listing_df.tail()

listing_df['host_location'].value_counts()

"""# List the counts of each city"""

listing_df['city'].value_counts()

listing_df['amenities'].value_counts()

listing_df['neighbourhood_group_cleansed'].tail()

"""We can use the listings.csv to compute neigbourhood data which can be used for further analysis"""

neighbourhood_cols = ['id', 'property_type', 'room_type', 'neighbourhood', 
                      'neighbourhood_cleansed','zipcode', 'price']

neighbourhood_listings = listing_df[neighbourhood_cols]
neighbourhood_listings.tail()

neighbourhood_listings.head()

"""# Q1. Most common price listings for AirBnb?

Data Cleaning
"""

listing_df['price'] = listing_df['price'].apply(lambda x: x.replace('$','').replace(',', '').replace('.00', '')).astype(np.float64)
listing_df['price'].head()

plt.figure(figsize=(16, 10));
listing_df['price'].hist(bins = 30);
plt.title('Price of AirBNBs', size = 16, weight = 'bold', color='C0');
plt.ylabel('Count of AirBnbs', weight = 'bold', size = 16, color='C0');
plt.xlabel('Price (USD)', weight = 'bold', size= 16, color='C0');

"""# The following histogram shows that there are only few listings above 700 dollars with the highest being 4000 dollars."""

plt.figure(figsize=(16, 10));
listing_df[listing_df['price'] > 700]['price'].hist(bins=40);
plt.title('Price of AirBNBs', size = 20, weight = 'bold', color='C0');
plt.ylabel('Count of AirBNBs', weight = 'bold',size = 20, color='C0');
plt.xlabel('Price (USD)', weight = 'bold', size = 20,  color='C0');

"""# The following breakdown indicates that more airbnbs are on the lower end of the price range below 700 dollars."""

plt.figure(figsize=(16, 10));
listing_df[listing_df['price'] < 700]['price'].hist(bins=80);
plt.title('Price of AirBNBs', size = 20, weight = 'bold',  color='C0');
plt.ylabel('Count of AirBnbs', size =16, weight = 'bold', color='C0');
plt.xlabel('Price (USD)', size = 20,  weight = 'bold', color='C0');

reviews_df.info()

reviews_df.head()

"""# Q2. What is the relation between price and property type?"""

plt.figure(figsize=(12,12), dpi=200)
plt.title('Average price per property type', weight ='bold', size = 20);
plt.xlabel('room_type', size = 20)
plt.ylabel('property_type', size = 20)
sns.heatmap(listing_df.groupby(['property_type','room_type']).price.mean().unstack(), annot=True, fmt='.1f', linewidths= .5, cmap='BuGn');

"""# The above heatmap shows a general trend when the room type is Entire home/apt, price is generally higher while it is less in case of shared room"""

calendar_df.head()

calendar_df['price']

neighbourhood_cols = ['id', 'property_type', 'room_type', 'neighbourhood', 
                      'neighbourhood_cleansed','zipcode', 'price']

neighbourhood_listings = listing_df[neighbourhood_cols]
neighbourhood_listings.tail()

listing_df['neighbourhood_cleansed'].head()

listing_df.groupby(['neighbourhood_cleansed']).mean()['price'].sort_values(ascending=False)

"""# Q3. Which room types in each neighbourhood have high prices?"""

plt.figure(figsize=(15, 10), dpi=200)
plt.title('Prices of AirBNBs in neighbourhoods', size = 16, weight = 'bold');
plt.ylabel('Neighbourhoods', size = 16, weight = 'bold');
plt.xlabel('Price (USD)', size = 16, weight = 'bold');
base_color = sns.color_palette()[0]
sns.scatterplot(x='price', y='neighbourhood_cleansed',hue='room_type',data=listing_df)

"""# Average prices for each neighbourhood"""

price_per_neighbourhood = listing_df.groupby(['neighbourhood_cleansed']).price.mean()
plt.figure(figsize=(20,10), dpi=200);
price_per_neighbourhood.plot(kind='barh', color='m');
plt.xlabel('Average Price', weight='bold', size =20)
plt.ylabel('Neighbourhood', weight = 'bold', size =20)
plt.title('Neighbourhood Average Price Chart', weight ='bold', size = 20);

"""# Thus, we can conclude that South Boston Waterfront has the highest price amongst other neighbourhoods.

# Relation between price and superhost
"""

listing_df['host_is_superhost'].value_counts()

fig, ax = plt.subplots(figsize=(10,5), dpi=100)  
sns.barplot(x='price', y='host_is_superhost', data=listing_df)

"""# Q4. What are the top 5 amenities?"""

listing_df['room_type'].value_counts()

listing_df.groupby(['price', 'beds','bed_type','amenities','square_feet','security_deposit', 'cleaning_fee']).head()

listing_df

"""# Let us revisit our data to understand the features"""

listing_df.describe()

listing_df['amenities'].head()

listing_df.dtypes

"""# Cleaning the amenities column"""

amenities = listing_df['amenities'].apply(lambda x: [a.replace('{', '').replace('}', '').replace('"', '') for a in x.split(',')])

amenities

mlb = MultiLabelBinarizer()
amenities_result = pd.DataFrame(mlb.fit_transform(amenities), index=amenities.index, columns=mlb.classes_)

amenities_count=amenities_result.sum().sort_values(ascending=False)

plt.figure(figsize=(16,8),dpi=200)
plt.barh(amenities_count[:5].index,amenities_count[:5].values)
plt.title('Top 5 Popular Amenities', weight='bold', size =20)
plt.ylabel('Amenity', weight='bold', size =20)
plt.xlabel('Occurence', weight='bold', size =20)

"""# The Top 5 amenities are in the following order:
Wireless Internet
Heating 
kitchen 
Essentials
Smoke detector

# So, in this way we have clearly used the Crisp Dm principles to perform the data analytics.
"""

